@model X.PagedList.IPagedList<newmachinetest.Models.Product>
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Index";
}

<h1>Product List</h1>

@{
    var successMessage = TempData["SuccessMessege"] as string;
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <script>
        alert("@successMessage");
    </script>
}

<p>
    <a asp-action="Create" class="btn btn-primary">Create New</a>
</p>

@if (!Model.Any())
{
    <div class="alert alert-warning text-center">No Record Found</div>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Category ID</th>
                <th>CategoryName</th>
  
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.ProductId</td>
                    <td>@item.ProductName</td>
                    <td>@item.CategoryId</td>
                    <td>@item.CategoryName</td>
                    <td>
                        <a asp-action="Edit" class="btn btn-success" asp-route-id="@item.ProductId">Edit</a> |
                 
                        <a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.ProductId"
                           onclick="return confirm('Are you sure?');">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

   
    
    <div class="text-center">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }),
                new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
    })
    </div>
    }




















